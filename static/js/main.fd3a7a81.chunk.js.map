{"version":3,"sources":["sortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","barOneStyle","document","getElementsByClassName","style","setTimeout","backgroundColor","speed","arrayBars","barOneIndex","barTwoIndex","barTwoStyle","pop","tempHeight","height","barOneIdx","barTwoIdx","color","newHeight","temp","getBubbleSortAnimations","animationHelper","getInsertionSortAnimations","minIndex","getSelectionSortAnimations","className","map","value","idx","key","class","onClick","mergeSort","bubbleSort","insertionSort","selectionSort","sorted","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fd3a7a81.chunk.js","sourcesContent":["//-----------------------------  MERGE SORT  -----------------------------\r\n\r\nexport function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations,\r\n) {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n  mainArray,\r\n  startIdx,\r\n  middleIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations,\r\n) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, i]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, i]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index i in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([j, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([j, j]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index j in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}\r\n\r\n//-----------------------------  BUBBLE SORT  -----------------------------\r\n\r\nexport function getBubbleSortAnimations(array) {\r\n  let animations = [];\r\n  for (let i = 0; i < array.length; i++) {\r\n    for (let j = 0; j < array.length - i - 1; j++) {\r\n      if (array[j] > array[j + 1]) {\r\n        let temp = array[j];\r\n        animations.push([j, j + 1]);\r\n        animations.push([j, j + 1]);\r\n        array[j] = array[j + 1];\r\n        array[j + 1] = temp;\r\n      }\r\n    }\r\n  }\r\n  return animations;\r\n}\r\n\r\n//-----------------------------  INSERTION SORT  -----------------------------\r\n\r\nexport function getInsertionSortAnimations(array) {\r\n  let animations = [];\r\n  for (let i = 1; i < array.length; i++) {\r\n    let j = i - 1;\r\n    let temp = array[i];\r\n    while (temp < array[j] && j >= 0) {\r\n      array[j + 1] = array[j]\r\n      animations.push([j + 1, j]);\r\n      animations.push([j + 1, j]);\r\n      j--;\r\n    }\r\n    array[j + 1] = temp;\r\n  }\r\n  return animations;\r\n}\r\n\r\n//-----------------------------  SELECTION SORT  -----------------------------\r\n\r\nexport function getSelectionSortAnimations(array) {\r\n  let animations = [];\r\n  for (let i = 0; i < array.length; i++) {\r\n    let minIndex = i;\r\n    for (let j = i + 1; j < array.length; j++) {\r\n      if (array[minIndex] > array[j]) {\r\n        minIndex = j;\r\n      }\r\n    }\r\n    animations.push([i, minIndex]);\r\n    animations.push([i, minIndex]);\r\n    let temp = array[minIndex];\r\n    array[minIndex] = array[i];\r\n    array[i] = temp;\r\n  }\r\n  return animations;\r\n}\r\n\r\n/* (function ($) {\r\n  if ($('.text-slider').length == 1) {\r\n    var typed_strings = $('.text-slider-items').text();\r\n    var typed = new Typed('.text-slider', {\r\n      strings: typed_strings.split(','),\r\n      typeSpeed: 80,\r\n      loop: true,\r\n      backDelay: 1100,\r\n      backSpeed: 30\r\n    });\r\n  }\r\n})(jQuery); */\r\n","import React from 'react';\r\nimport { getMergeSortAnimations, getBubbleSortAnimations, getInsertionSortAnimations, getSelectionSortAnimations } from '../sortingAlgorithms/sortingAlgorithms.js';\r\nimport './SortingVisualizer.css';\r\n\r\n// Change this value for the speed of the animations.\r\nconst SORT_SPEED_MS = 1.5;\r\nconst ANIMATION_SPEED_MS = 5;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\n/* var isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\r\nvar element = document.getElementById('text');\r\nif (isMobile) {\r\n  element.innerHTML = \"You are using Mobile\";\r\n} else {\r\n  element.innerHTML = \"You are using Desktop\";\r\n} */\r\n\r\nconst NUMBER_OF_ARRAY_BARS = 100;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'grey';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nconst SORTED_COLOR = 'green';\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n      array.push(randomIntFromInterval(25, 475));\r\n    }\r\n    this.setState({ array });\r\n    for (let i = 0; i < this.state.array.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const barOneStyle = arrayBars[i].style;\r\n      setTimeout(() => {\r\n        barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n      }, i * ANIMATION_SPEED_MS)\r\n    }\r\n  }\r\n\r\n  // Animation to swap\r\n\r\n  animationHelper(animations, speed = SORT_SPEED_MS) {\r\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const [barOneIndex, barTwoIndex] = animations[i];\r\n      const barOneStyle = arrayBars[barOneIndex].style;\r\n      const barTwoStyle = arrayBars[barTwoIndex].style;\r\n      if (i % 2 === 0) {\r\n        setTimeout(() => {\r\n          animations.pop();\r\n          barOneStyle.backgroundColor = SECONDARY_COLOR;\r\n          barTwoStyle.backgroundColor = SECONDARY_COLOR;\r\n          let tempHeight = barOneStyle.height;\r\n          barOneStyle.height = barTwoStyle.height;\r\n          barTwoStyle.height = tempHeight;\r\n        }, (i + 1) * speed);\r\n      }\r\n      else {\r\n        setTimeout(() => {\r\n          animations.pop();\r\n          barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n          barTwoStyle.backgroundColor = PRIMARY_COLOR;\r\n        }, (i + 1) * speed);\r\n      }\r\n    }\r\n  }\r\n\r\n  postAnimation() {\r\n    setTimeout(() => {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      for (let i = 0; i < this.state.array.length; i++) {\r\n        setTimeout(() => {\r\n          arrayBars[i].style.backgroundColor = SORTED_COLOR;\r\n          //document.getElementsByClassName(\"bar-section\")[0].style.boxShadow = \"inset 0px 5px 6px 7px green\";\r\n        }, i * 10);\r\n      }\r\n\r\n      /* setTimeout(() => {\r\n        for (let i = 0; i < this.state.array.length; i++) {\r\n          arrayBars[i].style.backgroundColor = \"#20232a\";\r\n        }\r\n        document.getElementsByClassName(\"bar-section\")[0].style.boxShadow = \"inset 0px 5px 6px 7px #20232a\";\r\n        this.enableButtons();\r\n      }, (this.state.array.length * 10) + 1000);\r\n    }, (length + 1) * speedF + 1000); */\r\n    })\r\n  }\r\n\r\n  //Merge sort \r\n\r\n  mergeSort() {\r\n    const animations = getMergeSortAnimations(this.state.array);\r\n    /* console.log(animations);\r\n    console.log(this.state.array); */\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * SORT_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * SORT_SPEED_MS);\r\n      }\r\n    }\r\n\r\n    /* for (let i = 0; i < this.state.array.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const barOneStyle = arrayBars[i].style;\r\n      setTimeout(() => {\r\n        barOneStyle.backgroundColor = SORTED_COLOR;\r\n      }, i * ANIMATION_SPEED_MS)\r\n    } */\r\n\r\n    //barOneStyle.backgroundColor = SORTED_COLOR;\r\n  }\r\n\r\n\r\n  bubbleSort() {\r\n    // this.disableButtons();\r\n    setTimeout(() => {\r\n      const animations = getBubbleSortAnimations(this.state.array);\r\n      this.animationHelper(animations);\r\n    });\r\n    return;\r\n  }\r\n\r\n  insertionSort() {\r\n    setTimeout(() => {\r\n      const animations = getInsertionSortAnimations(this.state.array);\r\n      this.animationHelper(animations);\r\n    });\r\n  }\r\n\r\n  selectionSort() {\r\n    setTimeout(() => {\r\n      const animations = getSelectionSortAnimations(this.state.array);\r\n      this.animationHelper(animations, 30);\r\n    });\r\n  }\r\n\r\n  quickSort() {\r\n    // We leave it as an exercise to the viewer of this code to implement this method.\r\n  }\r\n\r\n\r\n  heapSort() {\r\n    // We leave it as an exercise to the viewer of this code to implement this method.\r\n  }\r\n  return;\r\n\r\n  sorted() {\r\n    for (let i = 0; i < this.state.array.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const barOneStyle = arrayBars[i].style;\r\n      setTimeout(() => {\r\n        barOneStyle.backgroundColor = SORTED_COLOR;\r\n      }, i * ANIMATION_SPEED_MS)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { array } = this.state;\r\n\r\n    return (\r\n      <div className=\"array-container\">\r\n        <h1>Sorting Visualizer</h1>\r\n        <div className=\"dev\">\r\n          <h2>Still in development...</h2>\r\n        </div>\r\n        {array.map((value, idx) => (\r\n          <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{\r\n              backgroundColor: PRIMARY_COLOR,\r\n              height: `${value}px`,\r\n            }}></div>\r\n        ))}\r\n        <br />\r\n        <br />\r\n        <div className=\"buttons\">\r\n          <button class=\"button\" onClick={() => this.resetArray()}>Shuffle Array</button>\r\n          <button class=\"btn button\" onClick={() => this.mergeSort()}>Merge Sort</button>\r\n          {/* <button class=\"btn button\" onClick={() => this.mergeSort().then(() => this.sorted())}>Merge Sort</button> */}\r\n          {/* <div>{() => this.sorted()}</div> */}\r\n          <button class=\"btn button\" onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n          <button class=\"btn button\" onClick={() => this.insertionSort()}>Insertion Sort</button>\r\n          <button class=\"btn button\" onClick={() => this.selectionSort()}>Selection Sort</button>\r\n          {/* <div> {this.sorted()} </div> */}\r\n          {/* <button onClick={() => this.quickSort()}>Quick Sort</button>\r\n          <button onClick={() => this.heapSort()}>Heap Sort</button>\r\n          <button onClick={() => this.testSortingAlgorithms()}>\r\n          Test Sorting Algorithms (BROKEN)\r\n        </button> */}\r\n          <button class=\"btn button\" onClick={() => this.sorted()}>Sorted</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntFromInterval(min, max) {\r\n  // min and max included\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n/* function arraysAreEqual(arrayOne, arrayTwo) {\r\n  if (arrayOne.length !== arrayTwo.length) return false;\r\n  for (let i = 0; i < arrayOne.length; i++) {\r\n    if (arrayOne[i] !== arrayTwo[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n} */\r\n","import React from 'react';\r\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <SortingVisualizer></SortingVisualizer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}