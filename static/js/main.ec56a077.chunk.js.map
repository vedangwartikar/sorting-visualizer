{"version":3,"sources":["sortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","barOneStyle","document","getElementsByClassName","style","setTimeout","backgroundColor","arrayBars","barOneIndex","barTwoIndex","barTwoStyle","pop","tempHeight","height","speedF","barOneIdx","barTwoIdx","color","newHeight","temp","getBubbleSortAnimations","animationHelper","className","class","map","value","idx","key","onClick","mergeSort","bubbleSort","sorted","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ec56a077.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n\r\nexport function getBubbleSortAnimations(array) {\r\n  let animations = [];\r\n  for (let i = 0; i < array.length; i++) {\r\n    for (let j = 0; j < array.length - i - 1; j++) {\r\n      if (array[j] > array[j + 1]) {\r\n        let temp = array[j];\r\n        animations.push([j, j + 1]);\r\n        animations.push([j, j + 1]);\r\n        array[j] = array[j + 1];\r\n        array[j + 1] = temp;\r\n      }\r\n    }\r\n  }\r\n  return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations,\r\n) {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n  mainArray,\r\n  startIdx,\r\n  middleIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations,\r\n) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, i]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, i]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index i in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([j, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([j, j]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index j in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}\r\n\r\n/* (function ($) {\r\n  if ($('.text-slider').length == 1) {\r\n    var typed_strings = $('.text-slider-items').text();\r\n    var typed = new Typed('.text-slider', {\r\n      strings: typed_strings.split(','),\r\n      typeSpeed: 80,\r\n      loop: true,\r\n      backDelay: 1100,\r\n      backSpeed: 30\r\n    });\r\n  }\r\n})(jQuery); */\r\n","import React from 'react';\r\nimport { getMergeSortAnimations, getBubbleSortAnimations } from '../sortingAlgorithms/sortingAlgorithms.js';\r\nimport './SortingVisualizer.css';\r\n\r\n// Change this value for the speed of the animations.\r\nconst SORT_SPEED_MS = 1.5;\r\nconst ANIMATION_SPEED_MS = 5;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 100;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'grey';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nconst SORTED_COLOR = 'green';\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n      array.push(randomIntFromInterval(5, 550));\r\n    }\r\n    this.setState({ array });\r\n    for (let i = 0; i < this.state.array.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const barOneStyle = arrayBars[i].style;\r\n      setTimeout(() => {\r\n        barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n      }, i * ANIMATION_SPEED_MS)\r\n    }\r\n  }\r\n\r\n  // Animation to swap\r\n\r\n  animationHelper(animations) {\r\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n\r\n    // this.postAnimation();\r\n\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const [barOneIndex, barTwoIndex] = animations[i];\r\n      const barOneStyle = arrayBars[barOneIndex].style;\r\n      const barTwoStyle = arrayBars[barTwoIndex].style;\r\n      if (i % 2 === 0) {\r\n        setTimeout(() => {\r\n          animations.pop();\r\n          barOneStyle.backgroundColor = SECONDARY_COLOR;\r\n          barTwoStyle.backgroundColor = SECONDARY_COLOR;\r\n          let tempHeight = barOneStyle.height;\r\n          barOneStyle.height = barTwoStyle.height;\r\n          barTwoStyle.height = tempHeight;\r\n        }, (i + 1) * SORT_SPEED_MS);\r\n      }\r\n      else {\r\n        setTimeout(() => {\r\n          animations.pop();\r\n          barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n          barTwoStyle.backgroundColor = PRIMARY_COLOR;\r\n        }, (i + 1) * SORT_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  postAnimation(length, speedF) {\r\n    setTimeout(() => {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      for (let i = 0; i < this.state.array.length; i++) {\r\n        setTimeout(() => {\r\n          arrayBars[i].style.backgroundColor = SORTED_COLOR;\r\n          //document.getElementsByClassName(\"bar-section\")[0].style.boxShadow = \"inset 0px 5px 6px 7px green\";\r\n        }, i * 10);\r\n      }\r\n\r\n      setTimeout(() => {\r\n        for (let i = 0; i < this.state.array.length; i++) {\r\n          arrayBars[i].style.backgroundColor = \"#20232a\";\r\n        }\r\n        //document.getElementsByClassName(\"bar-section\")[0].style.boxShadow = \"inset 0px 5px 6px 7px #20232a\";\r\n        //this.enableButtons();\r\n      }, (this.state.array.length * 10) + 1000);\r\n    }, (length + 1) * speedF + 1000);\r\n  }\r\n\r\n  //Merge sort \r\n\r\n  mergeSort() {\r\n    const animations = getMergeSortAnimations(this.state.array);\r\n    /* console.log(animations);\r\n    console.log(this.state.array); */\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * SORT_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * SORT_SPEED_MS);\r\n      }\r\n    }\r\n\r\n    /* for (let i = 0; i < this.state.array.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const barOneStyle = arrayBars[i].style;\r\n      setTimeout(() => {\r\n        barOneStyle.backgroundColor = SORTED_COLOR;\r\n      }, i * ANIMATION_SPEED_MS)\r\n    } */\r\n\r\n    //barOneStyle.backgroundColor = SORTED_COLOR;\r\n  }\r\n\r\n  quickSort() {\r\n    // We leave it as an exercise to the viewer of this code to implement this method.\r\n  }\r\n\r\n  heapSort() {\r\n    // We leave it as an exercise to the viewer of this code to implement this method.\r\n  }\r\n\r\n  bubbleSort() {\r\n    // this.disableButtons();\r\n    setTimeout(() => {\r\n      const animations = getBubbleSortAnimations(this.state.array);\r\n      this.animationHelper(animations);\r\n    }, 500);\r\n  }\r\n\r\n  sorted() {\r\n    for (let i = 0; i < this.state.array.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const barOneStyle = arrayBars[i].style;\r\n      setTimeout(() => {\r\n        barOneStyle.backgroundColor = SORTED_COLOR;\r\n      }, i * ANIMATION_SPEED_MS)\r\n    }\r\n  }\r\n  // NOTE: This method will only work if your sorting algorithms actually return\r\n  // the sorted arrays; if they return the animations (as they currently do), then\r\n  // this method will be broken.\r\n\r\n  /* testSortingAlgorithms() {\r\n    for (let i = 0; i < 100; i++) {\r\n      const array = [];\r\n      const length = randomIntFromInterval(1, 1000);\r\n      for (let i = 0; i < length; i++) {\r\n        array.push(randomIntFromInterval(-1000, 1000));\r\n      }\r\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n      const mergeSortedArray = getMergeSortAnimations(array.slice());\r\n      console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\r\n    }\r\n  } */\r\n\r\n  render() {\r\n    const { array } = this.state;\r\n\r\n    return (\r\n      <div className=\"array-container\">\r\n        <h1 class=\"text-slider-items\">Sorting Visualizer</h1>\r\n        {array.map((value, idx) => (\r\n          <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{\r\n              backgroundColor: PRIMARY_COLOR,\r\n              height: `${value}px`,\r\n            }}></div>\r\n        ))}\r\n        <br />\r\n        <br />\r\n        <button class=\"button\" onClick={() => this.resetArray()}>Shuffle Array</button>\r\n        <button class=\"btn button\" onClick={() => this.mergeSort()}>Merge Sort</button>\r\n        {/* <button class=\"btn button\" onClick={() => this.mergeSort().then(() => this.sorted())}>Merge Sort</button> */}\r\n        {/* <div>{() => this.sorted()}</div> */}\r\n        <button class=\"btn button\" onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n        {/* <div> {this.sorted()} </div> */}\r\n        {/* <button onClick={() => this.quickSort()}>Quick Sort</button>\r\n        <button onClick={() => this.heapSort()}>Heap Sort</button>\r\n        <button onClick={() => this.testSortingAlgorithms()}>\r\n        Test Sorting Algorithms (BROKEN)\r\n      </button> */}\r\n        <button class=\"btn button\" onClick={() => this.sorted()}>Sorted</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntFromInterval(min, max) {\r\n  // min and max included\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n/* function arraysAreEqual(arrayOne, arrayTwo) {\r\n  if (arrayOne.length !== arrayTwo.length) return false;\r\n  for (let i = 0; i < arrayOne.length; i++) {\r\n    if (arrayOne[i] !== arrayTwo[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n} */\r\n","import React from 'react';\r\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <SortingVisualizer></SortingVisualizer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}